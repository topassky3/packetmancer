name: Rust CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build_and_test: # Renombramos el job para mayor claridad
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false # Importante: Sigue probando otros OS aunque uno falle
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      # ---------- Windows: Entorno MSVC ----------
      # Necesario para la compilación con MSVC toolchain
      - name: Set up MSVC env (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      # ---------- Linux: Instalar libpcap-dev ----------
      - name: Install libpcap (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev

      # ---------- Windows: Instalar Npcap SDK ----------
      # Simplificado: Solo instalamos el SDK. Confiamos en que el build script
      # de la librería `pcap` y el entorno MSVC lo encontrarán.
      - name: Install Npcap SDK (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: choco install npcap-sdk -y

      # ---------- Build + Lint + Tests (Para TODOS los OS) ----------
      - name: Build
        run: cargo build --verbose

      - name: Clippy
        run: cargo clippy -- -D warnings

      - name: Tests
        # Ejecutamos tests en todos los sistemas operativos
        run: cargo test --all-features --verbose
```

### **Qué Ha Cambiado y Por Qué**

1.  **Nombre del Job:** Cambiado a `build_and_test` por claridad.
2.  **Se eliminó `continue-on-error`:** Queremos que la CI falle si *cualquier* OS falla. Buscamos calidad total.
3.  **Instalación de Npcap Simplificada:** Eliminamos toda la configuración manual de `LIB`, `INCLUDE`, `PATH`. Solo instalamos el `npcap-sdk` con `choco`. Confiamos en que el entorno MSVC y el script de construcción de la librería `pcap` hagan su trabajo.
4.  **Tests Habilitados para Windows:** Eliminamos el `if: matrix.os != 'windows-latest'` del paso de `Tests`. Ahora verificaremos que las pruebas también pasen en Windows.

### **Pasos a Seguir**

1.  **Asegúrate de estar en la rama correcta** en tu terminal local (probablemente `feature/add-assets` o `ci/fix-npcap-and-failfast`):
    ```powershell
    git checkout feature/add-assets
    # o el nombre de la rama donde tienes el ci.yml
    ```
2.  **Reemplaza** el contenido de tu archivo `.github/workflows/ci.yml` con el código corregido de arriba.
3.  **Guarda** el archivo.
4.  **Haz commit y push** de este cambio a la misma rama:
    ```powershell
    git add .github/workflows/ci.yml
    git commit -m "CI: Simplify Npcap installation for Windows"
    git push
    
