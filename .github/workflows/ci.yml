name: Rust CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.os == 'windows-latest' }}   # opcional: no bloquea si falla Windows
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      # ---------- Linux ----------
      - name: Install libpcap (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev

      # ---------- Windows ----------
      - name: Set up MSVC env (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Npcap runtime & SDK (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          choco install npcap -y --params '"/winpcap_mode=yes /npf_startup=yes"'
          choco install npcap-sdk -y

          $rt  = "${env:ProgramFiles}\Npcap"
          $sdk = "${env:ProgramFiles}\Npcap SDK"

          # Hints para el linker y para build scripts de pcap/pcap-sys
          echo "LIB=$sdk\Lib\x64;$env:LIB"           | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "INCLUDE=$sdk\Include;$env:INCLUDE"   | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PCAP_LIBDIR=$sdk\Lib\x64"            | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "PCAP_INCLUDE_DIR=$sdk\Include"       | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "NPCAP_DIR=$sdk"                      | Out-File -FilePath $env:GITHUB_ENV -Append

          # DLLs en PATH para ejecutar binarios/tests
          echo "C:\Windows\System32\Npcap"           | Out-File -FilePath $env:GITHUB_PATH -Append
          echo "$rt"                                 | Out-File -FilePath $env:GITHUB_PATH -Append

          # Sanity checks: fallar si falta algo
          if (!(Test-Path "$sdk\Lib\x64\wpcap.lib")) { Write-Error "No se encontró wpcap.lib"; exit 1 }
          if (!(Test-Path "$sdk\Lib\x64\Packet.lib")) { Write-Error "No se encontró Packet.lib"; exit 1 }
          if (!(Test-Path "C:\Windows\System32\Npcap\wpcap.dll")) { Write-Error "No se encontró wpcap.dll"; exit 1 }

      # ---------- Build & QA ----------
      - name: Build
        run: cargo build --verbose

      - name: Clippy
        run: cargo clippy -- -D warnings

      - name: Tests
        run: cargo test --all-features --verbose
