name: Rust CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.os == 'windows-latest' }} # permitir fallo en Windows sin romper el check global
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable

      # ---------- Windows: entorno MSVC ----------
      - name: Set up MSVC env (Windows)
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      # ---------- Linux: libpcap ----------
      - name: Install libpcap (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get update && sudo apt-get install -y libpcap-dev

      # ---------- Windows: Npcap runtime + SDK ----------
      - name: Install Npcap runtime & SDK (Windows)
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: |
          choco install npcap -y --params '"/winpcap_mode=yes /npf_startup=yes"'
          choco install npcap-sdk -y
          $rt  = "${env:ProgramFiles}\Npcap"
          $sdk = "${env:ProgramFiles}\Npcap SDK"
          # Rutas para el linker de MSVC (wpcap.lib y Packet.lib)
          echo "LIB=$sdk\Lib\x64;$env:LIB"           | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "INCLUDE=$sdk\Include;$env:INCLUDE"   | Out-File -FilePath $env:GITHUB_ENV -Append
          # DLLs en PATH para ejecutar binarios/tests
          echo "C:\Windows\System32\Npcap"           | Out-File -FilePath $env:GITHUB_PATH -Append
          echo "$rt"                                  | Out-File -FilePath $env:GITHUB_PATH -Append
          # (Debug opcional)
          Get-ChildItem "$sdk\Lib\x64" -Filter *.lib | ForEach-Object { $_.FullName }
          Get-ChildItem "C:\Windows\System32\Npcap" -Filter *.dll | ForEach-Object { $_.FullName }

      # ---------- Build + Lint + Tests ----------
      - name: Build
        run: cargo build --verbose

      - name: Clippy
        run: cargo clippy -- -D warnings

      - name: Tests (Ubuntu/macOS only)
        if: matrix.os != 'windows-latest'
        run: cargo test --all-features --verbose
